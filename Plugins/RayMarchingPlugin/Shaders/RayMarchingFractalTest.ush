#include  "/PluginShaders/SDFractalLibraryTest.ush"

SDFractal sdfLibraryTest;
float4 col = 0;
float3 base_pos = pWorldPosition;
float3 normal = 0;

base_pos = (base_pos - pObjectPosition) / pObjectScale * pScale;

int i = 0;

//float Xcomponent = dot(base_pos, pRotMatRow1);
//float Ycomponent = dot(base_pos, pRotMatRow2);
//float Zcomponent = dot(base_pos, pRotMatRow3);
//base_pos = float3(Xcomponent, Ycomponent, Zcomponent);

//Xcomponent = dot(pCameraVector, pRotMatRow1);
//Ycomponent = dot(pCameraVector, pRotMatRow2);
//Zcomponent = dot(pCameraVector, pRotMatRow3);
//pCameraVector = float3(Xcomponent, Ycomponent, Zcomponent);

float t = 0.0f;

//pClibbingBoxRotation /= 180.0f;
//pClibbingBoxRotation *= 3.1415926;

//float3x3 output = sdfLibrary.euler_yzx_to_axis_angle(pClibbingBoxRotation);

//float3 pRotMatClippingBoxRow1 = float3(1.0, 0.0, 0.0);//normalize(output[0]);
//float3 pRotMatClippingBoxRow2 = float3(0.0, 1.0, 0.0);//normalize(output[1]);
//float3 pRotMatClippingBoxRow3 = float3(0.0, 0.0, 1.0);//normalize(output[2]);

for (i = 0; i < pMaxSteps; i++)
{
	float3 pos = base_pos + pCameraVector * t;

	float2 dist = sdfLibraryTest.sdByType(pos, pFractalType, pLoop, 
	pIterations, pPower, pFoldScale, pFoldScale2,  pScale, pFoldAngles, pFoldAngles2, pFoldOffset, pFoldOffset2, pTime);


	//if (pEnablePlaneClip == 1.0f)
	{
		//float clipPos = pos;
		//float ClipXcomponent = dot(clipPos, pRotMatClippingBoxRow1);
		//float ClipYcomponent = dot(clipPos, pRotMatClippingBoxRow2);
		//float ClipZcomponent = dot(clipPos, pRotMatClippingBoxRow3);
		//clipPos = float3(ClipXcomponent, ClipYcomponent, ClipZcomponent);

		//dist.x = max(dist.x, sdfLibrary.sdBox(float4(pClippingBoxPosition + pos, 1.0), pClippingBoxScale));
	}    	

	t += dist.x;

    if (dist.x * pObjectScale < pDisThreshold)
    {
		pos = base_pos + pCameraVector * t;

        col = float4(1, 0, 0, 1);
    	IterationCount = dist.y * pScale;

		//if (pUseNormals == 1.0f)
		{
    		normal = sdfLibraryTest.sdNormalByType(pos, pFractalType);

			//float NXcomponent = dot(normal, float3(pRotMatRow1.x , pRotMatRow2.x, pRotMatRow3.x));
			//float NYcomponent = dot(normal, float3(pRotMatRow1.y , pRotMatRow2.y, pRotMatRow3.y));
			//float NZcomponent = dot(normal, float3(pRotMatRow1.z , pRotMatRow2.z, pRotMatRow3.z));
			//normal = float3(NXcomponent, NYcomponent, NZcomponent);
		}
	
        break;
    }
}

return float4(normal, col.a);