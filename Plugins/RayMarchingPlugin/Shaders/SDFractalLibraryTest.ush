struct SDFractal
{
	float Iterations;
	float Power;
	float FoldingScale;
	float FoldingScale2;
	float Scale;
	float Loop;
	float Time;

	float3 FoldAngles;
	float3 FoldAngles2;
	float3 FoldOffset;
	float3 FoldOffset2;

	float2 sdByType(float3 pos, float pFractalType, float _Loop,
	float _Iterations, float _Power, float _FoldingScale, float _FoldingScale2, float _Scale, float3 _FoldAngles, float3 _FoldAngles2, float3 _FoldOffset, float3 _FoldOffset2, float _Time)
	{
		Iterations = _Iterations;
		Power = _Power;
		FoldingScale = _FoldingScale;
		FoldingScale2 = _FoldingScale2;
		Scale = _Scale;
		Loop = _Loop;
		Time = _Time;

		FoldAngles = _FoldAngles;
		FoldAngles2 = _FoldAngles2;
		FoldOffset = _FoldOffset;
		FoldOffset2 = _FoldOffset2;

		float2 dist = 0;
		
		if (pFractalType == 0.0) dist = sdMondelbrot(pos);

		return dist;
	}

	
	float3 sdNormalByType(float3 pos, float pFractalType)
	{
		float3 normal = 0;

		if (pFractalType == 0.0) normal = sdMondelbrotNormal(pos);

		return normal;
	}

	float3 orbitByType(float3 orbit, float4 p)
	{
		orbit = orbitMin(orbit, p, float3(0.4, 0.4, 0.3), float3(0.0f, 0.0f, 0.0f));

		return orbit;
	}

	//##########################################
	//   Orbit functions
	float3 orbitInitZero()
	{
		return float3(0.0f, 0.0f, 0.0f);
	}

	float3 orbitInitInf()
	{
		return float3(1e20, 1e20, 1e20);
	}

	float3 orbitInitNegInf()
	{
		return float3(-1e20, -1e20, -1e20);
	}

	float3 orbitMin(float3 obt, float3 p, float3 s, float3 ogn)
	{
		return min(obt, (p.xyz - ogn) * s);
	}

	float3 orbitMinAbs(float3 obt, float3 p, float3 s, float3 ogn)
	{
		return min(obt, abs((p.xyz - ogn) * s));
	}

	float3 orbitMax(float3 obt, float3 p, float3 s, float3 ogn)
	{
		return max(obt, (p.xyz - ogn) * s);
	}

	float3 orbitMaxAbs(float3 obt, float3 p, float3 s, float3 ogn)
	{
		return max(obt, abs((p.xyz - ogn) * s));
	}

	float3 orbitSum(float3 obt, float3 p, float3 s, float3 ogn)
	{
		return obt + (p.xyz - ogn) * s;
	}

	float3 orbitSumAbs(float3 obt, float3 p, float3 s, float3 ogn)
	{
		return obt + abs((p.xyz - ogn) * s);
	}
	//##########################################
	//   Space folding functions

	float4 planeFold( float4 z, float3 n, float d) {
		z.xyz -= 2.0 * min(0.0, dot(z.xyz, n) - d) * n;

		return z;
	}
	float4 absFold( float4 z, float3 c) {
		z.xyz = abs(z.xyz - c) + c;

		return z;
	}
	float4 sierpinskiFold( float4 z) {
		z.xy -= min(z.x + z.y, 0.0);
		z.xz -= min(z.x + z.z, 0.0);
		z.yz -= min(z.y + z.z, 0.0);

		return z;
	}
	float4 mengerFold( float4 z) {
		float a = min(z.x - z.y, 0.0);
		z.x -= a;
		z.y += a;
		a = min(z.x - z.z, 0.0);
		z.x -= a;
		z.z += a;
		a = min(z.y - z.z, 0.0);
		z.y -= a;
		z.z += a;

		return z;
	}
	float4 sphereFold( float4 z, float minR, float maxR) {
		float r2 = dot(z.xyz, z.xyz);
		z *= max(maxR / max(minR, r2), 1.0);

		return z;
	}
	float4 boxFold( float4 z, float3 r) {
		z.xyz = clamp(z.xyz, -r, r) * 2.0 - z.xyz;

		return z;
	}
	float4 rotXFold( float4 z, float s, float c) {
		z.yz = float2(c*z.y + s*z.z, c*z.z - s*z.y);

		return z;
	}
	float4 rotYFold( float4 z, float s, float c) {
		z.xz = float2(c*z.x - s*z.z, c*z.z + s*z.x);

		return z;
	}
	float4 rotZFold( float4 z, float s, float c) {
		z.xy = float2(c*z.x + s*z.y, c*z.y - s*z.x);

		return z;
	}
	float4 rotXFold( float4 z, float a) {
		z = rotXFold(z, sin(a), cos(a));

		return z;
	}
	float4 rotYFold( float4 z, float a) {
		z = rotYFold(z, sin(a), cos(a));

		return z;
	}
	float4 rotZFold( float4 z, float a) {
		z = rotZFold(z, sin(a), cos(a));

		return z;
	}

	float4 scaleTranslateFold(float4 z, float s, float3 t)
	{
		z *= s;
		z.xyz += t;

		return z;
	}

	float4 scaleOriginFold(float4 z, float s)
	{
		z *= s;

		return z;
	}

	//##########################################
	//   Primative distance estimators

	float sdSphere(float4 p, float r) {
		return (length(p.xyz) - r) / p.w;
	}
	float sdTorus( float4 p, float2 t )
	{
	  float2 q = float2(length(p.xz)-t.x,p.y);
	  return (length(q)-t.y) / p.w;
	}

	float sdCylinder( float4 p, float h, float r )
	{
	  float2 d = abs(float2(length(p.xz),p.y)) - float2(h,r);
	  return (min(max(d.x,d.y),0.0) + length(max(d,0.0))) / p.w;
	}

	float sdBox(float4 p, float3 s) {
		float3 q = abs(p.xyz) - s;
		return (min(max(max(q.y, q.z), q.x), 0.0) + length(max(q, 0.0))) / p.w;
	}

	// --SDF--Mondelbrot--BEGIN--
	float2 sdMondelbrot(float3 p) {
		float3 z = p;
		float dr = 1.0;
		float r = 0.0;

		float i = 0;
		float t0 = 1.0;

		for (i = 0; i < Iterations ; i+=1.0f) {
			r = length(z);

			if (r > 2.0f) {
	            break;
	        }

			// convert to polar coordinates
			float theta = asin( z.z/r );
			float phi = atan2( z.y,z.x );
			dr =  pow(r, Power - 1.0f) * Power * dr + 1.0f;

			// scale and rotate the point
			float zr = pow(r, Power);
			theta = theta * Power + Loop * 25.0f * Time;
			phi = phi * Power;
			
			// convert back to cartesian coordinates
			z = zr * float3( cos(theta)*cos(phi), cos(theta)*sin(phi), sin(theta) );
			z += p;

			t0 = min(t0, zr);
		}
		float d = 0.5 * log(r) * r / dr;

	    return float2(d, t0);

		/*float3 orbit = orbitInitInf();
		float4 new_p = float4(p, 1.0f);
		float d = 1e20;
		new_p = absFold(new_p, float3(0.0f, 0.0f, 0.0f));
		for (int i = 0; i < Iterations; i++)
		{
			float4 old_p = new_p;
			if (old_p.x < 0.0f)
			{
				new_p = scaleTranslateFold(new_p, 1.0, float3(0.0f, 0.0f, FoldingScale2 * FoldOffset.z));
				new_p = rotXFold(new_p, 90.0f / 180.0f * 3.1415926);
				d = min(d, sdCylinder(new_p,  FoldOffset.x, FoldingScale2 * FoldOffset.z));
				new_p = rotXFold(new_p, -90.0f / 180.0f * 3.1415926);
				new_p = scaleTranslateFold(new_p, 1.0, float3(0.0f, 0.0f, -FoldingScale2 * FoldOffset.z));
			}
			else
			{
				new_p = scaleTranslateFold(new_p, 1.0, float3(0.0f, 0.0f, FoldOffset.z));
				new_p = rotXFold(new_p, 90.0f / 180.0f * 3.1415926);
				d = min(d, sdCylinder(new_p, FoldOffset.x, FoldOffset.z));
				new_p = rotXFold(new_p, -90.0f / 180.0f * 3.1415926);
				new_p = scaleTranslateFold(new_p, 1.0, float3(0.0f, 0.0f, -FoldOffset.z));
			}
			orbit = orbitMinAbs(orbit, new_p, float3(0.24, 2.28, 7.6), float3(0.0f, 0.0f, 0.0f));
			new_p = rotXFold(new_p, FoldAngles.x);
			new_p = rotYFold(new_p, FoldAngles.y);
			new_p = rotZFold(new_p, FoldAngles.z);

			old_p = new_p;

			new_p = absFold(new_p, float3(0.0f, 0.0f, 0.0f));

			new_p = scaleTranslateFold(new_p, FoldingScale, FoldOffset2);

			//if (old_p.y < 0.0f)
			{
				new_p = rotXFold(new_p, FoldAngles2.x);
				new_p = rotYFold(new_p, FoldAngles2.y);
				new_p = rotZFold(new_p, FoldAngles2.z);
			}
		}

		OutputColor = orbit;
        return float2(min(d, sdSphere(new_p, Power)), length(new_p));*/
	}

	float3 sdMondelbrotNormal(float3 p) {
		float3 k = float3(1,-1,0);
		float dx = 0.01;

		return normalize(k.xyy * sdMondelbrot(p + k.xyyz*dx).x +
						 k.yyx * sdMondelbrot(p + k.yyxz*dx).x +
						 k.yxy * sdMondelbrot(p + k.yxyz*dx).x +
						 k.xxx * sdMondelbrot(p + k.xxxz*dx).x);
	}
};
